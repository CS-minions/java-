TCP聊天程序代码说明

1. 服务器端代码解析 (ServerS.java)

1.1 服务器核心代码：
public class ServerS {
    private static final int PORT = 12345;
    private static Map<String, PrintWriter> clients = new HashMap<>();

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                Socket clientSocket = serverSocket.accept();
                new ClientHandler(clientSocket).start();
            }
        }
    }
}

代码说明：
- PORT = 12345：服务器监听端口
- clients：存储所有连接的客户端，键是客户端名称，值是输出流
- serverSocket.accept()：等待并接受客户端连接
- new ClientHandler(clientSocket).start()：为每个客户端创建新线程

1.2 客户端处理线程：
private static class ClientHandler extends Thread {
    private Socket socket;
    private BufferedReader in;
    private PrintWriter out;
    private String clientName;

    public void run() {
        try {
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out = new PrintWriter(socket.getOutputStream(), true);
            clientName = in.readLine();
            clients.put(clientName, out);
            
            String message;
            while ((message = in.readLine()) != null) {
                broadcast(clientName + ": " + message);
            }
        } finally {
            clients.remove(clientName);
        }
    }
}

代码说明：
- socket：与客户端的连接
- in：读取客户端消息的流
- out：发送消息给客户端的流
- clientName：客户端标识
- clients.put：将新客户端添加到映射表
- while循环：持续读取客户端消息
- clients.remove：客户端断开时清理资源

1.3 消息广播实现：
private void broadcast(String message) {
    synchronized (clients) {
        for (PrintWriter writer : clients.values()) {
            writer.println(message);
        }
    }
}

代码说明：
- synchronized：确保线程安全
- clients.values()：获取所有客户端的输出流
- writer.println：发送消息给每个客户端

2. 客户端代码解析 (Client.java)

2.1 客户端基本结构：
public class Client {
    private static final String SERVER_IP = "localhost";
    private static final int SERVER_PORT = 12345;
    private String clientName;
    private Socket socket;
    private BufferedReader in;
    private PrintWriter out;
    private JFrame frame;
    private JTextArea messageArea;
    private JTextField inputField;
}

代码说明：
- SERVER_IP：服务器地址
- SERVER_PORT：服务器端口
- socket：与服务器的连接
- in/out：输入输出流
- frame/messageArea/inputField：GUI组件

2.2 GUI初始化：
public Client(String name) {
    frame = new JFrame(name + " - 聊天窗口");
    messageArea = new JTextArea(20, 50);
    inputField = new JTextField(50);
    inputField.addActionListener(e -> {
        out.println(inputField.getText());
        inputField.setText("");
    });
}

代码说明：
- JFrame：创建主窗口
- JTextArea：显示聊天消息
- JTextField：输入消息
- addActionListener：处理发送消息事件

2.3 服务器连接：
private void connectToServer() throws IOException {
    socket = new Socket(SERVER_IP, SERVER_PORT);
    in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
    out = new PrintWriter(socket.getOutputStream(), true);
    out.println(clientName);
    
    new Thread(() -> {
        try {
            String message;
            while ((message = in.readLine()) != null) {
                messageArea.append(message + "\n");
            }
        } catch (IOException e) {
            messageArea.append("与服务器断开连接\n");
        }
    }).start();
}

代码说明：
- new Socket：连接到服务器
- out.println(clientName)：发送客户端标识
- new Thread：创建消息接收线程
- messageArea.append：显示接收到的消息

3. 运行说明

3.1 启动顺序：
1) 先运行ServerS.java
   javac ServerS.java
   java ServerS

2) 再运行Client.java
   javac Client.java
   java Client

3.2 运行效果：
- 服务器启动后显示等待连接信息
- 客户端启动后自动打开三个聊天窗口
- 在任意窗口输入消息，按回车发送
- 所有窗口都能看到发送的消息

3.3 注意事项：
- 确保服务器先启动
- 确保端口12345未被占用
- 保持服务器程序运行
- 客户端会自动启动三个窗口

4. 代码重点说明

4.1 线程使用：
- 服务器主线程：接受新连接
- 服务器子线程：处理每个客户端
- 客户端主线程：处理GUI
- 客户端子线程：接收消息

4.2 同步处理：
- synchronized保护clients集合
- SwingUtilities.invokeLater确保GUI线程安全

4.3 资源管理：
- try-with-resources自动关闭资源
- finally块确保资源清理
- 客户端断开时移除连接

4.4 异常处理：
- 服务器端异常不影响其他客户端
- 客户端异常显示在界面上
- 网络断开时自动清理资源 