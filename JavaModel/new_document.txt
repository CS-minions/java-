Java知识问答机器人项目文档

## 项目简介
这是一个基于Java开发的智能问答机器人系统，集成了多个大语言模型，提供了丰富的交互功能和用户友好的界面。

## 系统架构

### 2.1 核心组件
- JavaKnowledgeBot: 主界面类，继承自JFrame，负责UI展示和用户交互
- ModelAPI: 统一的API接口定义
- AliyunAPI: 阿里云通义千问API实现
- BaiduAPI: 百度文心一言API实现
- ModelAPIFactory: API工厂类，负责创建具体的API实例
- Config: 配置类，存储API密钥等配置信息
- StreamingResponse: 流式输出处理类，实现打字机效果
- CodeHighlighter: 代码高亮处理类，支持多种编程语言的语法高亮

### 2.2 技术栈
- 界面框架：Java Swing
- 网络请求：OkHttp3（支持异步请求和超时控制）
- JSON处理：org.json
- 并发处理：Java ExecutorService（线程池管理）
- 文本处理：Java Regex（正则表达式处理）
- API集成：
  * 阿里云通义千问 API
  * 百度文心一言 API
- 配置管理：Properties（配置文件管理）
- 文件操作：Java IO（日志和历史记录管理）

## 主要功能

3.1 用户界面
- 厂商选择：支持在阿里云和百度AI模型间切换
- 聊天界面：显示对话历史
- 输入区域：用户输入框和发送按钮
- 实时响应：异步处理AI响应，不阻塞UI

3.2 对话功能
- 多模型支持：支持与不同AI服务商的模型对话
- 历史记录：自动保存对话历史到本地文件
- 实时切换：支持在不同模型间无缝切换
- 异步处理：使用线程池处理AI请求，保证UI响应性

3.3 数据持久化
- 对话日志：按厂商分别保存对话记录
- 配置管理：通过配置文件管理API密钥等敏感信息

4. 代码实现详解

4.1 主界面实现 (JavaKnowledgeBot.java)
主要功能：
- 初始化图形界面组件
- 处理用户输入和发送消息
- 管理对话历史记录
- 处理模型切换
- 流式输出控制
- 代码高亮显示

代码解释：
1) 类定义和成员变量：
```java
public class JavaKnowledgeBot extends JFrame {
    private JComboBox<String> vendorComboBox;    // 模型选择下拉框
    private JTextPane chatTextPane;              // 聊天记录显示区域
    private JTextField inputTextField;           // 用户输入框
    private JButton sendButton;                  // 发送按钮
    private ExecutorService threadPool;          // 线程池，用于异步处理请求
    private StreamingResponse streamingResponse; // 流式输出管理器
    private JButton pauseButton;                // 暂停/继续按钮
    private JSlider speedSlider;                // 速度调节滑块
    
    private static final String[] VENDORS = {"阿里-通义千问", "百度-文心一言"}; // 支持的AI模型
}
```

2) 构造函数实现：
```java
public JavaKnowledgeBot() {
    setTitle("知识问答机器人");
    setSize(800, 600);
    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    setLocationRelativeTo(null);
    setMinimumSize(new Dimension(600, 400));

    addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosing(java.awt.event.WindowEvent windowEvent) {
            closeApplication();
        }
    });

    // 初始化线程池
    threadPool = Executors.newCachedThreadPool();

    // 创建布局
    setLayout(new BorderLayout(5, 5));

    // 创建所有面板和组件
    createPanels();
    
    // 初始化流式输出管理器
    streamingResponse = new StreamingResponse(chatTextPane);
    
    // 添加控制面板
    addControlPanel();

    // 初始加载默认厂商的聊天记录
    loadChatRecord();
}
```

3) 消息发送处理：
```java
private void onSendMessage(ActionEvent e) {
    String userInput = inputTextField.getText().trim();
    if (!userInput.isEmpty()) {
        // 显示用户消息
        chatTextArea.append("User: " + userInput + "\n");
        saveChatRecord("User: " + userInput);
        inputTextField.setText("");

        // 异步处理AI响应
        threadPool.submit(() -> {
            try {
                ModelAPI api = createAPIInstance((String) vendorComboBox.getSelectedItem());
                String modelResponse = api.call(userInput);
                SwingUtilities.invokeLater(() -> {
                    chatTextArea.append("Bot: " + modelResponse + "\n");
                    saveChatRecord("Bot: " + modelResponse);
                });
            } catch (Exception ex) {
                ex.printStackTrace();
                SwingUtilities.invokeLater(() -> {
                    chatTextArea.append("Error: " + ex.getMessage() + "\n");
                });
            }
        });
    }
}
```

4.2 API接口定义 (ModelAPI.java)
```java
public interface ModelAPI {
    // 统一的API调用接口，接收用户输入，返回AI响应
    String call(String userInput) throws Exception;
}
```
这个接口定义了所有AI模型实现必须提供的方法，确保了不同模型实现的一致性。

4.3 阿里云API实现 (AliyunAPI.java)
阿里云API使用官方提供的SDK进行调用，不需要手动管理URL和HTTP请求。

代码解释：
```java
public class AliyunAPI implements ModelAPI {
    private final String apiKey;
    private final String model;

    public AliyunAPI() {
        // 从配置类获取API密钥和模型名称
        this.apiKey = Config.ALIYUN_API_KEY;
        this.model = Config.ALIYUN_MODEL;
    }

    @Override
    public String call(String userInput) throws ApiException {
        // 创建通义千问API调用实例
        Generation gen = new Generation();
        
        // 设置系统角色消息
        Message systemMsg = Message.builder()
                .role(Role.SYSTEM.getValue())
                .content("You are a helpful assistant.")
                .build();
        
        // 设置用户输入消息
        Message userMsg = Message.builder()
                .role(Role.USER.getValue())
                .content(userInput)
                .build();
        
        // 构建API调用参数
        GenerationParam param = GenerationParam.builder()
                .apiKey(apiKey)      // 设置API密钥
                .model(model)        // 设置模型名称
                .messages(Arrays.asList(systemMsg, userMsg))  // 设置消息列表
                .resultFormat(GenerationParam.ResultFormat.MESSAGE)  // 设置返回格式
                .build();

        // 调用API并获取响应
        GenerationResult result = gen.call(param);
        
        // 从结果中提取回复内容
        return result.getOutput().getChoices().get(0).getMessage().getContent();
    }
}
```

主要特点：

1. SDK集成
   - 使用官方SDK管理API调用
   - 自动处理认证和请求
   - 提供类型安全的API

2. 消息构建
   - 支持系统角色设置
   - 支持多轮对话
   - 结构化的消息格式

3. 参数配置
   - 灵活的参数设置
   - 支持多种模型选择
   - 可配置返回格式

4. 错误处理
   - SDK级别的异常处理
   - 类型安全的响应解析
   - 完整的错误信息

4.4 百度API实现 (BaiduAPI.java)
代码解释：
```java
/**
 * 百度文心一言 API 实现类
 */
public class BaiduAPI implements ModelAPI {
    private final String apiKey;
    private final String secretKey;
    private final String apiUrl;
    private final OkHttpClient httpClient;

    public BaiduAPI() {
        this.apiKey = Config.BAIDU_API_KEY;
        this.secretKey = Config.BAIDU_SECRET_KEY;
        this.apiUrl = Config.BAIDU_API_URL;
        
        // 配置 OkHttpClient，添加超时设置
        this.httpClient = new OkHttpClient.Builder()
            .connectTimeout(30, TimeUnit.SECONDS)
            .writeTimeout(30, TimeUnit.SECONDS)
            .readTimeout(60, TimeUnit.SECONDS)
            .build();
    }

    @Override
    public String call(String userInput) throws Exception {
        try {
            String accessToken = getAccessToken();
            String url = apiUrl + accessToken;

            // 构建请求体
            JSONObject requestBody = new JSONObject();
            JSONArray messages = new JSONArray();
            JSONObject userMessage = new JSONObject();
            userMessage.put("role", "user");
            userMessage.put("content", userInput);
            messages.put(userMessage);
            requestBody.put("messages", messages);

            // 发送请求
            Request request = new Request.Builder()
                    .url(url)
                    .post(RequestBody.create(
                        MediaType.parse("application/json"), 
                        requestBody.toString()
                    ))
                    .addHeader("Content-Type", "application/json")
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    throw new IOException("API 调用失败: " + response.code() + " " + response.message());
                }

                JSONObject jsonResponse = new JSONObject(response.body().string());
                
                if (jsonResponse.has("error_code")) {
                    throw new IOException("API 错误: " + 
                        jsonResponse.getInt("error_code") + " - " + 
                        jsonResponse.getString("error_msg"));
                }

                return jsonResponse.getString("result");
            }
        } catch (Exception e) {
            System.err.println("API 调用出错: " + e.getMessage());
            throw e;
        }
    }

    /**
     * 获取访问令牌
     */
    private String getAccessToken() throws IOException {
        String tokenUrl = "https://aip.baidubce.com/oauth/2.0/token";
        RequestBody body = new FormBody.Builder()
                .add("grant_type", "client_credentials")
                .add("client_id", apiKey)
                .add("client_secret", secretKey)
                .build();

        Request request = new Request.Builder()
                .url(tokenUrl)
                .post(body)
                .addHeader("Content-Type", "application/x-www-form-urlencoded")
                .build();

        try (Response response = httpClient.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new IOException("认证失败: " + response.code() + " " + response.message());
            }

            JSONObject jsonResponse = new JSONObject(response.body().string());
            return jsonResponse.getString("access_token");
        }
    }
}
```

4.5 工厂类实现 (ModelAPIFactory.java)
代码解释：
```java
public class ModelAPIFactory {
    public static ModelAPI createAPI(String vendorModel) {
        // 根据选择的厂商创建对应的API实例
        if (vendorModel.contains("阿里")) {
            return new AliyunAPI();
        } else if (vendorModel.contains("百度")) {
            return new BaiduAPI();
        }
        throw new IllegalArgumentException("不支持的AI模型: " + vendorModel);
    }
}
```

4.6 配置类实现 (Config.java)

配置类的主要作用是存储和管理API密钥等配置信息。通过静态常量的方式提供配置访问。

```java
public class Config {
    // 阿里云配置
    public static final String ALIYUN_API_KEY = "sk-2c51c448693f437ab806cea4b110d2a9";
    public static final String ALIYUN_MODEL = "qwen-plus";

    // 百度配置
    public static final String BAIDU_API_KEY = "RxSzjmUWJQANqe3GLVN2N6rp";
    public static final String BAIDU_SECRET_KEY = "dQlXFW9pG9VpGLJQXg94VawLBPFKCjU2";
    public static final String BAIDU_API_URL = "https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=";

    // 禁止实例化
    private Config() {}
}
```

主要特点：

1. 配置集中管理
   - 所有API密钥和URL集中存储
   - 便于统一修改和维护
   - 避免配置散落在代码中

2. 静态访问
   - 使用静态常量提供配置
   - 无需创建实例即可访问
   - 私有构造函数防止实例化

3. 分组管理
   - 按照不同AI服务商分组
   - 配置项命名清晰
   - 注释说明配置用途

4. 使用示例
```java
// 在API类中使用配置
public class BaiduAPI implements ModelAPI {
    private final String apiKey;
    private final String secretKey;
    
    public BaiduAPI() {
        this.apiKey = Config.BAIDU_API_KEY;
        this.secretKey = Config.BAIDU_SECRET_KEY;
    }
}
```

4.7 流式输出实现 (StreamingResponse.java)

```java
/**
 * 流式输出处理类
 * 实现打字机效果的文本输出，支持暂停、继续、跳过和速度调节功能
 */
public class StreamingResponse {
    // UI组件：用于显示文本的面板
    private final JTextPane textPane;
    
    // 控制标志
    private volatile boolean isPaused = false;    // 暂停标志，volatile确保多线程可见性
    private volatile boolean skipToEnd = false;   // 跳过标志，直接显示全部内容
    
    // 打字速度控制（毫秒/字符）
    private int typingSpeed = 50;  // 默认50ms输出一个字符
    
    // 调度器：用于定时输出字符
    private ScheduledExecutorService scheduler;

    /**
     * 构造函数
     * @param textPane 目标文本显示面板
     */
    public StreamingResponse(JTextPane textPane) {
        this.textPane = textPane;
        // 创建单线程调度器，用于顺序输出字符
        this.scheduler = Executors.newSingleThreadScheduledExecutor();
    }

    /**
     * 流式输出文本
     * 将文本按照打字机效果逐字符显示
     * @param response 要显示的完整文本
     */
    public void streamResponse(String response) {
        if (response == null || response.isEmpty()) return;
        
        // 当前文本缓冲区
        StringBuilder currentText = new StringBuilder(textPane.getText());
        // 当前输出位置
        final int[] currentIndex = {0};
        
        // 创建定时任务
        ScheduledFuture<?>[] future = {null};
        future[0] = scheduler.scheduleAtFixedRate(() -> {
            // 处理跳过请求
            if (skipToEnd) {
                // 直接显示所有剩余文本
                currentText.append(response.substring(currentIndex[0]));
                updateTextPane(currentText.toString());
                future[0].cancel(false);
                skipToEnd = false;
                currentIndex[0] = response.length();
                return;
            }
            
            // 正常流式输出处理
            if (!isPaused && currentIndex[0] < response.length()) {
                // 追加下一个字符
                currentText.append(response.charAt(currentIndex[0]));
                updateTextPane(currentText.toString());
                currentIndex[0]++;
                
                // 检查是否完成输出
                if (currentIndex[0] >= response.length()) {
                    future[0].cancel(false);
                }
            }
        }, 0, typingSpeed, TimeUnit.MILLISECONDS);
    }

    /**
     * 暂停输出
     */
    public void pause() { 
        isPaused = true; 
    }

    /**
     * 继续输出
     */
    public void resume() { 
        isPaused = false; 
    }

    /**
     * 跳过动画直接显示全部内容
     */
    public void skipToEnd() { 
        skipToEnd = true; 
    }

    /**
     * 设置打字速度
     * @param speed 每个字符的显示间隔（毫秒）
     */
    public void setTypingSpeed(int speed) {
        // 限制速度在10-200ms之间
        this.typingSpeed = Math.max(10, Math.min(200, speed));
    }

    /**
     * 更新文本显示
     * 在EDT线程中安全地更新UI
     */
    private void updateTextPane(String text) {
        SwingUtilities.invokeLater(() -> {
            textPane.setText("");
            // 使用CodeHighlighter处理代码高亮
            CodeHighlighter.insertText(textPane, text, false);
            // 滚动到最新位置
            textPane.setCaretPosition(textPane.getDocument().getLength());
        });
    }

    /**
     * 清理资源
     * 关闭调度器，防止内存泄漏
     */
    public void cleanup() {
        if (scheduler != null && !scheduler.isShutdown()) {
            scheduler.shutdownNow();
        }
    }
}
```

4.8 代码高亮实现 (CodeHighlighter.java)

```java
/**
 * 代码高亮处理类
 * 支持多种编程语言的语法高亮显示，实现GitHub风格的代码块
 */
public class CodeHighlighter {
    // 代码块样式颜色定义
    private static final Color BACKGROUND_COLOR = new Color(246, 248, 250);  // GitHub风格背景色
    private static final Color HEADER_COLOR = new Color(240, 242, 244);      // 代码块头部背景色
    
    // 语法高亮颜色定义
    private static final Color KEYWORD_COLOR = new Color(207, 34, 46);      // 关键字 - 红色
    private static final Color STRING_COLOR = new Color(17, 99, 41);        // 字符串 - 绿色
    private static final Color COMMENT_COLOR = new Color(110, 119, 129);    // 注释 - 灰色
    private static final Color NORMAL_CODE_COLOR = new Color(36, 41, 47);   // 普通代码 - 深灰
    
    // 语法规则定义（正则表达式）
    private static final Pattern KEYWORDS = Pattern.compile(
        "\\b(def|class|import|from|return|if|else|while|for|try|except|in|is|not|and|or|lambda|None|True|False)\\b"
    );
    private static final Pattern STRINGS = Pattern.compile(
        "\"[^\"\\\\]*(\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(\\\\.[^'\\\\]*)*'"
    );
    private static final Pattern COMMENTS = Pattern.compile("#.*$", Pattern.MULTILINE);
    
    // 代码块匹配模式
    private static final Pattern CODE_BLOCK_PATTERN = Pattern.compile(
        "```(.*?)\\n([\\s\\S]*?)```"
    );

    /**
     * 插入带格式的文本
     * @param textPane 目标文本面板
     * @param text 要插入的文本
     * @param isUserMessage 是否是用户消息
     */
    public static void insertText(JTextPane textPane, String text, boolean isUserMessage) {
        try {
            StyledDocument doc = textPane.getStyledDocument();
            
            // 创建代码块基本样式
            Style codeStyle = textPane.addStyle("codeStyle", null);
            StyleConstants.setFontFamily(codeStyle, "Consolas");
            StyleConstants.setFontSize(codeStyle, 14);
            StyleConstants.setBackground(codeStyle, BACKGROUND_COLOR);
            
            // 查找并处理代码块
            Matcher matcher = CODE_BLOCK_PATTERN.matcher(text);
            while (matcher.find()) {
                // 提取代码块信息
                String language = matcher.group(1).trim();  // 编程语言
                String code = matcher.group(2);            // 代码内容
                
                // 添加代码块头部
                doc.insertString(doc.getLength(), "\n", null);
                
                // 创建并应用头部样式
                Style headerStyle = textPane.addStyle("headerStyle", null);
                StyleConstants.setBackground(headerStyle, HEADER_COLOR);
                StyleConstants.setFontFamily(headerStyle, "微软雅黑");
                StyleConstants.setFontSize(headerStyle, 12);
                doc.insertString(doc.getLength(), language + "\n", headerStyle);
                
                // 添加复制按钮
                JButton copyButton = new JButton("Copy code");
                copyButton.setFont(new Font("微软雅黑", Font.PLAIN, 12));
                copyButton.setFocusPainted(false);
                copyButton.addActionListener(e -> copyToClipboard(code));
                
                // 将按钮添加到文本面板
                StyleConstants.setComponent(codeStyle, copyButton);
                doc.insertString(doc.getLength(), " ", codeStyle);
                
                // 处理代码高亮
                highlightCode(doc, code, language);
            }
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }

    /**
     * 代码高亮处理
     * 对代码进行语法分析并应用相应的颜色样式
     * @param doc 文档对象
     * @param code 代码内容
     * @param language 编程语言
     */
    private static void highlightCode(StyledDocument doc, String code, String language) 
            throws BadLocationException {
        String[] lines = code.split("\n");
        for (String line : lines) {
            // 处理注释
            Matcher commentMatcher = COMMENTS.matcher(line);
            if (commentMatcher.find()) {
                Style commentStyle = doc.addStyle(null, null);
                StyleConstants.setForeground(commentStyle, COMMENT_COLOR);
                doc.insertString(doc.getLength(), line + "\n", commentStyle);
                continue;
            }
            
            // 处理字符串
            Matcher stringMatcher = STRINGS.matcher(line);
            int lastEnd = 0;
            while (stringMatcher.find()) {
                // 添加字符串前的普通文本
                doc.insertString(doc.getLength(), 
                    line.substring(lastEnd, stringMatcher.start()), 
                    createBaseStyle(doc));
                
                // 添加字符串
                Style stringStyle = createBaseStyle(doc);
                StyleConstants.setForeground(stringStyle, STRING_COLOR);
                doc.insertString(doc.getLength(), 
                    stringMatcher.group(), 
                    stringStyle);
                
                lastEnd = stringMatcher.end();
            }
            
            // 处理关键字
            String remaining = line.substring(lastEnd);
            Matcher keywordMatcher = KEYWORDS.matcher(remaining);
            lastEnd = 0;
            while (keywordMatcher.find()) {
                // 添加普通文本
                doc.insertString(doc.getLength(), 
                    remaining.substring(lastEnd, keywordMatcher.start()), 
                    createBaseStyle(doc));
                
                // 添加关键字
                Style keywordStyle = doc.addStyle(null, null);
                StyleConstants.setForeground(keywordStyle, KEYWORD_COLOR);
                doc.insertString(doc.getLength(), 
                    keywordMatcher.group(), 
                    keywordStyle);
                
                lastEnd = keywordMatcher.end();
            }
            
            // 添加剩余文本
            if (lastEnd < remaining.length()) {
                doc.insertString(doc.getLength(), 
                    remaining.substring(lastEnd) + "\n", 
                    createBaseStyle(doc));
            }
        }
    }

    /**
     * 创建基本代码样式
     * 设置字体、大小和颜色等基本属性
     */
    private static Style createBaseStyle(StyledDocument doc) {
        Style style = doc.addStyle(null, null);
        StyleConstants.setFontFamily(style, "Consolas");
        StyleConstants.setFontSize(style, 14);
        StyleConstants.setForeground(style, NORMAL_CODE_COLOR);
        StyleConstants.setBackground(style, BACKGROUND_COLOR);
        return style;
    }

    /**
     * 复制文本到剪贴板
     * 提供代码块的快速复制功能
     */
    private static void copyToClipboard(String text) {
        StringSelection selection = new StringSelection(text);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, null);
    }
}
```

这两个类的主要特点和实现细节：

1. StreamingResponse类：
   - 使用 `volatile` 关键字确保多线程环境下的可见性
   - 使用 `ScheduledExecutorService` 实现定时输出
   - 通过 `SwingUtilities.invokeLater` 确保UI更新线程安全
   - 支持动态调整输出速度
   - 提供完整的资源清理机制

2. CodeHighlighter类：
   - 使用正则表达式识别代码元素
   - 实现GitHub风格的代码块样式
   - 支持实时语法高亮
   - 提供代码复制功能
   - 使用 `StyledDocument` 实现富文本显示

这些实现提供了：
1. 流畅的打字机效果
2. 专业的代码显示效果
3. 良好的用户交互体验
4. 稳定的多线程处理

5. 多线程与网络通信实现

5.1 多线程架构
```java
public class JavaKnowledgeBot extends JFrame {
    // 创建线程池管理多个用户请求
    private final ExecutorService threadPool;
    
    public JavaKnowledgeBot() {
        // 初始化可缓存的线程池，根据需要创建新线程
        threadPool = Executors.newCachedThreadPool();
    }
    
    // 处理用户发送消息的方法
    private void onSendMessage(ActionEvent e) {
        String userInput = inputTextField.getText().trim();
        if (!userInput.isEmpty()) {
            // 在新线程中处理用户请求
            threadPool.submit(() -> {
                try {
                    // 创建API实例
                    ModelAPI api = ModelAPIFactory.createAPI(
                        vendorComboBox.getSelectedItem().toString()
                    );
                    
                    // 异步调用API
                    String response = api.call(userInput);
                    
                    // 在EDT线程中更新UI
                    SwingUtilities.invokeLater(() -> {
                        streamingResponse.streamResponse(response);
                    });
                } catch (Exception ex) {
                    handleError(ex);
                }
            });
        }
    }
}
```

5.2 网络请求优化
```java
public class BaiduAPI implements ModelAPI {
    private final OkHttpClient httpClient;
    
    public BaiduAPI() {
        // 配置OkHttpClient，设置超时和连接池
        this.httpClient = new OkHttpClient.Builder()
            .connectTimeout(30, TimeUnit.SECONDS)
            .writeTimeout(30, TimeUnit.SECONDS)
            .readTimeout(60, TimeUnit.SECONDS)
            // 配置连接池，最大空闲连接5个，保持活跃5分钟
            .connectionPool(new ConnectionPool(5, 5, TimeUnit.MINUTES))
            .build();
    }
    
    @Override
    public String call(String userInput) throws Exception {
        // 构建请求
        Request request = new Request.Builder()
            .url(getApiUrl())
            .post(createRequestBody(userInput))
            .build();
            
        // 执行网络请求
        try (Response response = httpClient.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new IOException("API调用失败: " + response.code());
            }
            return response.body().string();
        }
    }
}
```

5.3 性能监控实现
```java
public class PerformanceMonitor {
    // 使用线程安全的Map存储请求时间
    private final Map<String, Long> requestTimes = new ConcurrentHashMap<>();
    
    // 开始监控请求
    public void startRequest(String requestId) {
        requestTimes.put(requestId, System.currentTimeMillis());
    }
    
    // 结束监控请求
    public void endRequest(String requestId) {
        Long startTime = requestTimes.remove(requestId);
        if (startTime != null) {
            long duration = System.currentTimeMillis() - startTime;
            logger.info("请求 {} 耗时: {}ms", requestId, duration);
        }
    }
}
```

5.4 实现特点

1. 线程池管理
- 使用 ExecutorService 管理线程池
- 自动创建和复用线程
- 避免频繁创建和销毁线程
- 控制并发线程数量

2. 异步处理
- 用户请求在独立线程中处理
- 不阻塞UI主线程
- 使用 SwingUtilities.invokeLater 安全更新UI
- 支持并行处理多个请求

3. 网络优化
- 使用 OkHttpClient 的连接池
- 设置合理的超时时间
- 复用HTTP连接
- 自动管理连接资源

4. 性能监控
- 使用 ConcurrentHashMap 保证线程安全
- 记录每个请求的处理时间
- 提供性能分析数据
- 支持请求追踪

5.5 实现效果

1. 系统响应性
- 应用程序保持流畅响应
- UI界面不会卡顿
- 用户体验良好
- 支持多任务并行

2. 资源利用
- 高效利用系统资源
- 避免资源浪费
- 自动管理内存
- 优化CPU使用

3. 稳定性保证
- 异常处理完善
- 资源自动释放
- 超时机制保护
- 系统可靠运行

6. 日志记录实现

6.1 日志记录功能概述

本项目实现了完整的对话日志记录功能，主要特点：
- 按不同AI模型分别存储对话记录
- 使用本地文本文件(.txt)持久化存储
- 支持UTF-8编码，确保中文正确显示
- 自动创建和管理日志文件
- 实现了读写分离，提高性能

6.2 核心代码实现

1) 保存对话记录
```java
/**
 * 保存单条对话记录到文件
 * 使用synchronized确保线程安全
 * @param message 要保存的消息内容
 */
private synchronized void saveChatRecord(String message) {
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(getLogFilePath(), true))) {
        writer.write(message);
        writer.newLine();
    } catch (IOException e) {
        e.printStackTrace();
        CodeHighlighter.insertText(chatTextPane, "Error: 保存聊天记录失败: " + e.getMessage() + "\n", false);
    }
}
```

2) 加载历史记录
```java
/**
 * 加载历史对话记录
 * 如果日志文件不存在会自动创建
 */
private void loadChatRecord() {
    String logFilePath = getLogFilePath();
    File logFile = new File(logFilePath);
    
    // 如果文件不存在，创建新文件
    if (!logFile.exists()) {
        try {
            logFile.createNewFile();
            return; // 新文件创建后直接返回，因为内容为空
        } catch (IOException e) {
            handleError(new Exception("创建聊天记录文件失败: " + e.getMessage(), e));
            return;
        }
    }
    
    // 读取现有文件内容
    try (BufferedReader reader = new BufferedReader(new FileReader(logFile))) {
        String line;
        while ((line = reader.readLine()) != null) {
            chatTextPane.setText(chatTextPane.getText() + line + "\n");
        }
    } catch (IOException e) {
        handleError(new Exception("加载聊天记录失败: " + e.getMessage(), e));
    }
}
```

3) 日志文件路径管理
```java
/**
 * 获取当前AI模型对应的日志文件路径
 * 根据选择的厂商自动生成对应的文件名
 * @return 日志文件路径
 */
private String getLogFilePath() {
    // 获取选中的厂商名称
    String selectedVendor = (String) vendorComboBox.getSelectedItem();
    // 使用 UTF-8 编码处理文件名
    try {
        String fileName = "chat_log_" + selectedVendor.replace(" ", "_") + ".txt";
        return new String(fileName.getBytes("UTF-8"), "UTF-8");
    } catch (Exception e) {
        e.printStackTrace();
        return "chat_log_default.txt";
    }
}
```

6.3 使用场景

1. 记录用户输入
```java
// 发送消息时记录用户输入
chatTextArea.append("User: " + userInput + "\n");
saveChatRecord("User: " + userInput);
```

2. 记录AI响应
```java
// 接收到AI响应时记录
chatTextArea.append("Bot: " + modelResponse + "\n");
saveChatRecord("Bot: " + modelResponse);
```

3. 切换模型时的记录处理
```java
// 切换AI模型时重新加载对应的聊天记录
private void onVendorChange(ActionEvent e) {
    chatTextPane.setText(""); // 清空当前聊天记录
    loadChatRecord(); // 加载新选厂商的聊天记录
}
```

6.4 实现特点

1. 文件管理
- 按AI模型分别存储记录
- 自动创建日志文件
- UTF-8编码支持
- 文件名安全处理

2. 读写操作
- 追加模式写入
- 按行读取记录
- 使用缓冲流提高性能
- 自动关闭资源

3. 异常处理
- IO异常优雅处理
- 编码异常处理
- 提供错误反馈
- 默认值保护

4. 性能考虑
- 使用BufferedWriter提升写入性能
- 使用BufferedReader提升读取性能
- 资源自动关闭
- 最小化文件操作

6.5 注意事项

1. 文件操作
- 使用try-with-resources确保资源释放
- 检查文件存在性
- 处理文件创建失败的情况
- 正确处理文件编码

2. 异常处理
- 捕获所有可能的IO异常
- 提供用户友好的错误信息
- 记录错误日志
- 保证程序稳定运行

3. 性能优化
- 避免频繁打开关闭文件
- 使用缓冲流提升性能
- 合理处理大文件
- 异步写入考虑

7. 设计模式详解

7.1 工厂模式（Factory Pattern）

工厂模式是一种创建型设计模式，它提供了一种创建对象的最佳方式。在本项目中，工厂模式主要用于创建不同AI模型的API实例。

1) 基本实现
```java
// 统一的API接口
public interface ModelAPI {
    String call(String userInput) throws Exception;
}

// 阿里云API实现
public class AliyunAPI implements ModelAPI {
    @Override
    public String call(String userInput) throws Exception {
        // 阿里云API的具体实现
    }
}

// 百度API实现
public class BaiduAPI implements ModelAPI {
    @Override
    public String call(String userInput) throws Exception {
        // 百度API的具体实现
    }
}

// 工厂类
public class ModelAPIFactory {
    public static ModelAPI createAPI(String vendorModel) {
        if (vendorModel.contains("阿里")) {
            return new AliyunAPI();
        } else if (vendorModel.contains("百度")) {
            return new BaiduAPI();
        }
        throw new IllegalArgumentException("不支持的AI模型");
    }
}
```

2) 工厂模式的三个核心作用

a. 封装对象创建过程
- 客户端代码不需要知道具体类的创建细节
- 示例：
```java
// 不使用工厂模式
if (vendor.equals("阿里")) {
    api = new AliyunAPI();
    api.setConfig(...);
    api.initialize(...);
} else if (vendor.equals("百度")) {
    api = new BaiduAPI();
    api.setCredentials(...);
    api.setup(...);
}

// 使用工厂模式
ModelAPI api = ModelAPIFactory.createAPI(vendor);  // 一行代码搞定
```

b. 便于扩展新功能
- 添加新的AI模型只需要三步：
  1. 创建新的API实现类
  2. 实现ModelAPI接口
  3. 在工厂类中添加创建逻辑
- 示例：添加讯飞星火模型
```java
// 1. 创建新的API实现类
public class XunfeiAPI implements ModelAPI {
    @Override
    public String call(String userInput) throws Exception {
        // 讯飞星火API的具体实现
    }
}

// 2. 在工厂类中添加创建逻辑
public class ModelAPIFactory {
    public static ModelAPI createAPI(String vendorModel) {
        if (vendorModel.contains("阿里")) {
            return new AliyunAPI();
        } else if (vendorModel.contains("百度")) {
            return new BaiduAPI();
        } else if (vendorModel.contains("讯飞")) {
            return new XunfeiAPI();  // 新增的模型
        }
        throw new IllegalArgumentException("不支持的AI模型");
    }
}
```

c. 符合开闭原则
- 开闭原则：软件实体应该对扩展开放，对修改关闭
- 工厂模式的实现方式：
  - 通过接口定义统一的行为规范
  - 通过继承实现功能扩展
  - 通过多态实现动态调用

3) 在项目中的具体应用

a. 统一的调用方式
```java
// 在JavaKnowledgeBot类中使用工厂模式
private void onSendMessage(ActionEvent e) {
    String userInput = inputTextField.getText().trim();
    if (!userInput.isEmpty()) {
        threadPool.submit(() -> {
            try {
                // 使用工厂创建API实例，无需关心具体实现
                ModelAPI api = ModelAPIFactory.createAPI(
                    vendorComboBox.getSelectedItem().toString()
                );
                // 统一的调用方式
                String response = api.call(userInput);
                // 处理响应...
            } catch (Exception ex) {
                // 异常处理...
            }
        });
    }
}
```

b. 配置的统一管理
```java
// 在Config类中统一管理不同API的配置
public class Config {
    // 统一的配置管理
    private static final Properties props = new Properties();
    
    static {
        try (FileInputStream fis = new FileInputStream("model-config.properties")) {
            props.load(fis);
        } catch (IOException e) {
            throw new RuntimeException("配置加载失败", e);
        }
    }
    
    // 根据厂商获取配置
    public static String getConfig(String vendor, String key) {
        return props.getProperty(vendor + "." + key);
    }
}
```

4) 工厂模式的优势

a. 代码解耦
- 将对象的创建与使用分离
- 降低代码间的依赖关系
- 提高代码的可维护性

b. 封装变化
- 将可能变化的部分封装在工厂类中
- 需要修改创建逻辑时，只需修改工厂类
- 不影响使用方的代码

c. 简化客户端代码
- 客户端无需了解对象的创建细节
- 统一的创建接口
- 更少的代码量

8. 未来优化方向

1. 添加更多AI模型的支持
2. 优化用户界面，提供更好的用户体验
3. 添加对话上下文管理
4. 增加错误重试机制
5. 添加消息队列支持
6. 优化网络请求性能
7. 添加更多的配置选项

这个项目展示了如何构建一个功能完整的AI对话应用，通过良好的架构设计和模块化实现，为用户提供了便捷的AI对话体验。

